name: Continuous Integration

on: [push, pull_request]

jobs:
  setup-and-test:
    runs-on: [self-hosted, linux, x64, ec2-ci-runner]  # Ensure this matches the labels of your EC2 self-hosted runner
    services:
      postgresql:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        php-version: ['8.0.9']

    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, pdo_pgsql
        ini-values: post_max_size=256M, upload_max_filesize=256M  # Adjust as necessary
        coverage: none

    - name: Check PHP Version
      run: php --version

    - name: Check PostgreSQL Client Version
      run: psql --version

    - name: Check PostgreSQL Server Version
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "SELECT version();"

    # Add your tests and other CI steps here
    # Example: Run PHPUnit tests
    - name: Run PHPUnit Tests
      run: ./vendor/bin/phpunit

  deploy-to-dev:
    needs: setup-and-test
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Deploy to Development Environment
      run: |
        echo "Deploying to development server..."
        # Insert your deployment script here

  # Define other deployment jobs (e.g., deploy-to-staging, deploy-to-production) as needed

  deploy-to-staging:
    runs-on: ubuntu-20.04
    needs: setup-and-test
    steps:
    - uses: actions/checkout@v2
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging server..."
        # Your deployment script for staging

  deploy-to-production:
    runs-on: ubuntu-20.04
    needs: setup-and-test
    steps:
    - uses: actions/checkout@v2
    - name: Deploy to Production
      run: |
        echo "Deploying to production server..."
        # Your deployment script for production
